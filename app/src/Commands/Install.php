<?php declare(strict_types=1);

namespace Commands;

use Dotenv\Dotenv;
use GuzzleHttp\Client;
use GuzzleHttp\Event\EndEvent;
use GuzzleHttp\Event\ProgressEvent;
use League\Flysystem\Adapter\Local;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use ZipArchive;

class Install extends BuildCommand
{
    const ENV = <<<'ENV'
# This file was generated by the shopware composer shell installer
# Shop environment and database connection
SHOPWARE_ENV="dev"

# Database credentials. Be sure to URL-encode any values containing special characters
# Format: mysql://username:password@host:port/database
DATABASE_URL="mysql://%3$s:%4$s@%1$s:%5$s/%2$s"

ENV;

    /**
     * @var array
     */
    private $environmentSettings = [];

    /**
     * @var array
     */
    private $installationSettings = [];

    /**
     * @var ProgressBar
     */
    private $progress;

    protected function configure()
    {
        $this->addOption('admin-email', null, InputOption::VALUE_OPTIONAL);
        $this->addOption('admin-name', null, InputOption::VALUE_OPTIONAL);
        $this->addOption('admin-username', null, InputOption::VALUE_OPTIONAL);
        $this->addOption('admin-password', null, InputOption::VALUE_OPTIONAL);

        $this->addOption('shop-url', null, InputOption::VALUE_OPTIONAL);

        $this->addOption('import-demodata', null, InputOption::VALUE_NONE);
        $this->addOption('skip-images', null, InputOption::VALUE_NONE);
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        /** @var Local $adapter */
        $adapter = $this->filesystem->getAdapter();
        $io = new SymfonyStyle($input, $output);

        $this->showBanner($output);

        if (!$this->envFileExists() && !$input->isInteractive()) {
            $io->error('The .env file can only be generated in interactive mode.');

            return 1;
        }

        $io->title('Hi there! We need to configure your shop before proceeding any further, please complete the following fields.');
        $this->gatherSettings($io, $input);

        (new Dotenv($adapter->applyPathPrefix('.')))->load();

        if ($input->isInteractive() && !$io->confirm(sprintf('Start installation? This will drop the database %s!', getenv('DATABASE_URL')), false)) {
            $io->writeln('Not touching the database, have fun!');

            return 0;
        }

        $this->rebootApplication();

        $this->executeCommand('sw:database:setup --steps=drop,create,import', $output);

        if ($this->installationSettings['IMPORT_DEMODATA']) {
            $io->writeln('Importing demo data please wait...');
            $this->executeCommand('sw:database:setup --steps=importDemodata', $output);
        }

        $this->createSymlinks();

        $this->executeCommand(sprintf('sw:database:setup --steps=setupShop --shop-url="%s"', $this->installationSettings['SHOP_URL']), $output);
        $this->executeCommand('sw:snippets:to:db --include-plugins', $output);
        $this->executeCommand('sw:theme:initialize', $output);
        $this->executeCommand('sw:firstrunwizard:disable', $output);
        $this->executeCommand('sw:plugin:deactivate SwagUpdate', $output);
        $this->executeCommand(sprintf(
            'sw:admin:create --name="%s" --email="%s" --username="%s" --password="%s"',
            $this->installationSettings['ADMIN_NAME'],
            $this->installationSettings['ADMIN_EMAIL'],
            $this->installationSettings['ADMIN_USERNAME'],
            $this->installationSettings['ADMIN_PASSWORD']
        ), $output);

        if (!$input->getOption('skip-images') &&
            $this->installationSettings['IMPORT_DEMODATA'] &&
            $io->confirm('Do you want to install the images (~285MB) for the installed demo data? cURL is required.')) {

            $client = new Client();

            $request = $client->createRequest('GET', 'http://releases.s3.shopware.com/test_images_since_5.1.zip', [
                'save_to' => $adapter->applyPathPrefix('images.zip'),
            ]);

            $request->getEmitter()->on('progress', function (ProgressEvent $event) use ($io) {
                if ($this->progress instanceof ProgressBar) {
                    $this->progress->setProgress($event->downloaded);
                } elseif ($event->downloadSize) {
                    $this->progress = $io->createProgressBar($event->downloadSize);
                }
            });

            $request->getEmitter()->on('end', function () use ($io) {
                if ($this->progress instanceof ProgressBar) {
                    $this->progress->finish();
                    $io->newLine();
                }
            });

            $client->send($request);

            $zip = new ZipArchive();
            $zip->open($adapter->applyPathPrefix('images.zip'));
            $zip->extractTo($adapter->applyPathPrefix('.'));
            $zip->close();

            $this->filesystem->delete('images.zip');
        }

        $io->success('Installation finished, have fun!');

        return 0;
    }

    protected function gatherSettings(SymfonyStyle $io, InputInterface $input)
    {
        $correct = false;

        while ($correct !== true) {
            if (!$this->envFileExists()) {
                $this->gatherEnvironmentSettings($io);
            }

            $this->gatherInstallationSettings($io, $input);

            if (!$this->envFileExists()) {
                $tmpSettings = [];
                foreach ($this->environmentSettings as $key => $value) {
                    $tmpSettings[] = [
                        $key,
                        $value,
                    ];
                }
                $io->title('The following settings will be written to the .env file:');
                $io->table([], $tmpSettings);
            }

            $tmpSettings = [];
            foreach ($this->installationSettings as $key => $value) {
                $tmpSettings[] = [
                    $key,
                    is_bool($value) ? $value ? 'yes' : 'no' : $value,
                ];
            }
            $io->title('The following settings will be used for the installation:');
            $io->table([], $tmpSettings);

            $correct = $io->confirm('Is this information correct?');
        }

        if (!$this->envFileExists()) {
            $this->storeEnv();
        }
    }

    protected function gatherEnvironmentSettings(SymfonyStyle $io)
    {
        $this->environmentSettings = [];

        $io->section('Database settings');
        $this->environmentSettings = array_merge($this->environmentSettings, [
            'DB_HOST' => $io->ask('Enter your database host', '127.0.0.1'),
            'DB_DATABASE' => $io->ask('Enter your database name', 'swcomposer'),
            'DB_USERNAME' => $io->ask('Enter your database username', 'shopware'),
            'DB_PASSWORD' => $io->ask('Enter your database password', 'shopware'),
            'DB_PORT' => (int) $io->ask('Enter your database port number', 3306),
        ]);
    }

    protected function gatherInstallationSettings(SymfonyStyle $io, InputInterface $input)
    {
        $this->installationSettings = [];

        $io->section('Admin settings');
        $this->installationSettings = array_merge($this->installationSettings, [
            'ADMIN_USERNAME' => $input->getOption('admin-username') ?? $io->ask('Admin username', 'demo'),
            'ADMIN_PASSWORD' => $input->getOption('admin-password') ?? $io->ask('Admin password', 'demo'),
            'ADMIN_NAME' => $input->getOption('admin-name') ?? $io->ask('Admin name', 'John Doe'),
            'ADMIN_EMAIL' => $input->getOption('admin-email') ?? $io->ask('Admin email', 'demo@demo.com'),
        ]);

        $io->section('Shop settings');
        $this->installationSettings = array_merge($this->installationSettings, [
            'SHOP_URL' => $input->getOption('shop-url') ?? $io->ask('Enter your shop URL incl. protocol and path', 'http://shopware.example/path'),
            'IMPORT_DEMODATA' => $input->getOption('import-demodata') ?: $io->confirm('Would you like to install demo data?', false),
        ]);
    }

    protected function storeEnv()
    {
        $env = sprintf(
            self::ENV,
            $this->environmentSettings['DB_HOST'],
            $this->environmentSettings['DB_DATABASE'],
            $this->environmentSettings['DB_USERNAME'],
            $this->environmentSettings['DB_PASSWORD'],
            $this->environmentSettings['DB_PORT']
        );

        $this->filesystem->write('.env', $env);
    }
}
